What Kind of Science is Computational Science? 


I will go ahead and admit that this is a silly question. However, I asked it as a title because it is a common question. The popular opinion (or perhaps I should say “traditional opinion”) is that there are three parts of science:
Maybe you can already guess that I’m not going to agree with these “three branches of science” idea.
If we want to see how three pieces fit into science, we need to first look at science. At the most basic level, science is about building models. If you just build a model with no connection to real life, that isn’t science. Instead, the model has to somehow agree with real actual data. How about a simple example from physics?

Here is a mass connected to a spring. If there is no friction (if you hold it vertically, this works also) and pull it back, it will oscillate. So, suppose you want to model this. First, you can get an expression for the force a spring exerts based experimental data. This says that the spring force (in just one dimension along the x-direction) would be:

 
Here, I am calling the x = 0 location to be the equilibrium position of the spring (where it exerts no force). Using this along with the relationship between force and acceleration (and the definition of acceleration and velocity), I get the following differential equation (all just in the x direction):

This is a solvable differential equation. It’s actually not too difficult to see that one solution for x(t) would be (we call this an analytical solution):

Since this is a trig function, if I know the frequency I can find the time for one oscillation (the period).

This expression should agree with actual real life data – that’s the whole point, right? But what if you solved this another way? I already went over a rather simple bit of code that could also give a value that agrees with real life data. But how are they different?
In a differential equation, what does the term dv/dt really mean? It means that in some infinitesimally small time interval (dt), there is an change in velocity. Really, this is the slope of the v-t graph. When I model the motion of a spring with computer code, I use Δv and Δt. These are not infinitely small. However, I can make them so small that you couldn’t even tell the difference.
In a derivative, we look at Δt in the limit that Δt goes to zero. For a computational model, we look at Δt in the limit that Δt gets small enough so that the output of the code agrees with real life. In both cases, the model is only useful if it agrees with real data. So, in that sense, both approaches are just as valid as the other.
If the two methods are essentially equivalent, then why do computational at all (or why do analytical at all)? First, let’s look at analytical. Obviously, you don’t always need a computer to get an analytic solution (although, sometimes it helps to solve some complicated equations). Second, if the solution agrees with experimental data – you are mostly done. You don’t have to keep changing the interval size until it does agree.
Ok, what about a computational (commonly called numerical) solution? You actually don’t need an electronic computer for a numerical calculation. The origin of the word “computer” comes from a “one who computes”. You can break any problem into small pieces and then solve each piece with paper and pencil – an electronic computer just does this faster than you can. The other nice thing about numerical methods is that it can work in situations in which their are no analytical methods. The classic example is the three body problem. If there are three objects gravitationally interacting with each other, a solution for their trajectory might be impossible analytically. With a numerical recipe, the solution is quite trivial.
If you like to compare analytical and numerical approaches, you can consider the following analogy. Suppose you wanted to travel from New York to Chicago. You could get in a automobile and drive, right? You could also get there by flying in an airplane. These seem like very different ways to travel, but in the end they both do the same thing. They take you from New York and get you to Chicago.
Numerical methods is like a plane and analytical is like a car. It would be silly to use a plane to travel across town and one would drive a car from New York to China. We need both methods for creating models of the real world, but they are both models.
There are not “three pillars” of science, there are only two. There is experimental data and theoretical models.
Suppose you make some awesome computational model. Maybe it is a model with 10,000 objects making up some type of solar system where they all orbit a star. You find that this solar system model agrees with some experimental data and that makes you happy. But what would happen if another star passed by close to this solar system? You could find out by numerically adding this second star, run the program and see what happens.
Wouldn’t this be an experiment? No. This is still a theoretical model. Experiments deal with real life things. Instead, this is just playing with the model. If we make a model and we know everything it is going to do, then what is the point of having a model? We can do the same thing with analytical models. Suppose you have a model of a mass of a spring. You can vary your parameters (like the mass and the spring constant) and see what happens to your period of motion (yes, this is a simplistic example).
I think there is another reason that we have this “three forms of science” idea. If you looked science in the early 70′s (or maybe even before), people started to use numerical methods more and more. However, some scientists can be cranky. They might claim that playing with a computer isn’t REAL science so you should get back in the lab or work with pencil and paper. So, perhaps as a defense or justification, scientists came up with this idea that “oh, hey – but this is ANOTHER aspect of science”.
In a way, we do need to give special consideration to numerical methods. What are strategies for getting faster and better results from a computer? Someone has to devote some time to these types of questions. But in end, it is still just model building.
You can build a model with an equation, a computer program or play dough. They are all models. Building models and comparing them to real life what science is all about.
Absolutely.  If you think of a numerical model as another tool in your belt (for theoretical models), then there isn’t a good reason to exclude this method.  It shouldn’t be a separate course, it should just be included in all courses.  I think that the introductory physics text Matter and Interactions does a great job including these ideas right into the course.
A couple of points in favor of computational methods in existing courses. First, it’s not that difficult.  It’s not like students have to learn C++ or Fortran (not that there is anything wrong with these languages).  We now have things like Python or even Mathematica which are both very easy to pick up and use (even though Mathematica isn’t nearly as free as python).   So, the entry barrier is much lower than it was in the past.  Numerical solutions are now used in many real world cases.  When student move on after undergraduate study, many problems can only be solved with a numerical model.  One last point. In many cases you can solve a physics with either a numerical model or an analytical model.  However, using the the analytic method can sometimes get students lost in the math without seeing the bigger ideas.  The numerical method lets the student still understand the math (especially if they write the code themselves) and get the bigger physics ideas.